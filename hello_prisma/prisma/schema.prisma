generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

enum Status {
    Done
    Failed
    Pending
}

enum Role {
    ADMIN
    USER
}

model User {
    username  String   @id
    password  String
    age       Int?
    role      Role     @default(USER)
    Task      Task[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt // @map("changeDataTime")
    Tag       Tag[]
    Token     Token[]

    //    @@map("customers")
}

model Task {
    id          BigInt    @id @default(autoincrement())
    title       String
    description String?
    status      Status    @default(Pending)
    user        User      @relation(fields: [userId], references: [username], onDelete: Cascade)
    userId      String
    dueDate     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    TagTask     TagTask[]
}

model Tag {
    id        String    @id @default(uuid())
    name      String
    user      User      @relation(fields: [userId], references: [username], onDelete: Cascade)
    userId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    TagTask   TagTask[]

    @@unique([name, userId])
}

model TagTask {
    tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId     String
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId    BigInt
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([tagId, taskId])
}

model Token {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [username], onDelete: Cascade)
    userId    String
    token     String
    createdAt DateTime @default(now())
}
